# Default values for SacuNXT Connector Framework
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # Global image registry settings
  imageRegistry: "your-registry.example.com"
  imagePullPolicy: Always
  imagePullSecrets: []
  
  # ECR configuration
  createECRSecret: true
  ecrToken: ""
  
  # Global environment settings
  timezone: "Asia/Kolkata"
  
  # Storage class for persistent volumes
  storageClass: "gp2"

# Namespace configuration
namespaceOverride: ""

# Service Account
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Image credentials for private registries
imageCredentials:
  registry: "your-registry.example.com"
  username: "your-username"
  password: ""
  email: "admin@example.com"

# PostgreSQL Database Configuration
postgresql:
  enabled: true
  image:
    registry: ""
    repository: "postgres"
    tag: "15-alpine"
    pullPolicy: IfNotPresent
  
  auth:
    enablePostgresUser: true
    postgresPassword: "sacunxt_password"
    username: "sacunxt"
    password: "sacunxt_password"
    database: "api_service"
  
  primary:
    persistence:
      enabled: true
      storageClass: "gp2"
      accessModes:
        - ReadWriteOnce
      size: 5Gi
    
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    
    service:
      type: ClusterIP
      ports:
        postgresql: 5432

# Redis Configuration
redis:
  enabled: true
  image:
    registry: ""
    repository: "redis"
    tag: "7-alpine"
    pullPolicy: IfNotPresent
  
  master:
    persistence:
      enabled: false
    
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"
    
    service:
      type: ClusterIP
      ports:
        redis: 6379

# Kafka Configuration
kafka:
  enabled: true
  
  zookeeper:
    enabled: true
    image:
      registry: ""
      repository: "wurstmeister/zookeeper"
      tag: "latest"
      pullPolicy: IfNotPresent
    
    persistence:
      enabled: true
      storageClass: "gp2"
      accessModes:
        - ReadWriteOnce
      size: 5Gi
    
    resources:
      requests:
        memory: "256Mi"
        cpu: "200m"
      limits:
        memory: "512Mi"
        cpu: "400m"
    
    service:
      type: ClusterIP
      ports:
        client: 2181
        server: 2888
        election: 3888
  
  image:
    registry: ""
    repository: "wurstmeister/kafka"
    tag: "latest"
    pullPolicy: IfNotPresent
  
  persistence:
    enabled: true
    storageClass: "gp2"
    accessModes:
      - ReadWriteOnce
    size: 20Gi
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "300m"
    limits:
      memory: "1Gi"
      cpu: "600m"
  
  service:
    type: ClusterIP
    ports:
      kafka: 9092
  
  config:
    defaultReplicationFactor: 1
    minInsyncReplicas: 1
    numPartitions: 3
    offsetsTopicReplicationFactor: 1
    transactionStateLogReplicationFactor: 1
    transactionStateLogMinIsr: 1
    logRetentionHours: 168
    logRetentionBytes: 1073741824
    messageMaxBytes: 20971520

# API Service Configuration
apiService:
  enabled: true
  replicaCount: 1
  
  image:
    repository: "sacunxt/api-service"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    STATUS: "http://scheduler-service:8002/scheduler/status"
    DB_HOST: "postgres-service.database.svc.cluster.local"
    DB_PORT: "5432"
    DB_USER: "sacunxt"
    DB_PASSWORD: "sacunxt_password"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
  
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /ready
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Scheduler Service Configuration
schedulerService:
  enabled: true
  replicaCount: 1
  
  image:
    repository: "sacunxt/scheduler-service"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 8002
    targetPort: 8002
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    REDIS_HOST: "redis"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    TZ: "Asia/Kolkata"
    SCHEDULER_RETRIES: "4"
    DB_HOST: "postgres-service.database.svc.cluster.local"
    DB_PORT: "5432"
    DB_USER: "sacunxt"
    DB_PASSWORD: "sacunxt_password"
  
  livenessProbe:
    httpGet:
      path: /scheduler/status
      port: 8002
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /scheduler/status
      port: 8002
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Config Service Configuration
configService:
  enabled: true
  replicaCount: 1
  
  image:
    repository: "sacunxt/config-service"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    REDIS_HOST: "redis"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    DB_HOST: "postgres-service.database.svc.cluster.local"
    DB_PORT: "5432"
    DB_USER: "sacunxt"
    DB_PASSWORD: "sacunxt_password"

# Collector Service Configuration
collectorService:
  enabled: true
  replicaCount: 1
  
  image:
    repository: "sacunxt/collector-service"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    REDIS_HOST: "redis"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    MAX_PRODUCE_SIZE: "20971520"
    DB_HOST: "postgres-service.database.svc.cluster.local"
    DB_PORT: "5432"
    DB_USER: "sacunxt"
    DB_PASSWORD: "sacunxt_password"

# Normalizer Service Configuration
normalizerService:
  enabled: true
  replicaCount: 1
  
  image:
    repository: "sacunxt/normalizer-service"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    REDIS_HOST: "redis"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    MAX_PRODUCE_SIZE: "20971520"
    DB_HOST: "postgres-service.database.svc.cluster.local"
    DB_PORT: "5432"
    DB_USER: "sacunxt"
    DB_PASSWORD: "sacunxt_password"

# Publisher Service Configuration
publisherService:
  enabled: true
  replicaCount: 1
  
  image:
    repository: "sacunxt/publisher-service"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    HOST: "redis"
    PORT: "6379"
    CONSUMER_HOST: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_HOST: "kafka-service.kafka-system.svc.cluster.local:9092"
    DB_HOST: "postgres-service.database.svc.cluster.local"
    DB_PORT: "5432"
    DB_USER: "sacunxt"
    DB_PASSWORD: "sacunxt_password"

# Action Service Configuration
actionService:
  enabled: true
  replicaCount: 1
  
  image:
    repository: "sacunxt/action-service"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"

# Ingress Configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: api-service
              port:
                number: 8000
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

  # Individual ingress configurations for services
  apiService:
    enabled: false
    hosts:
      - host: api.sacunxt.local
        path: /
        pathType: Prefix
    annotations: {}

  schedulerService:
    enabled: false
    hosts:
      - host: scheduler.sacunxt.local
        path: /
        pathType: Prefix
    annotations: {}

  configService:
    enabled: false
    hosts:
      - host: config.sacunxt.local
        path: /
        pathType: Prefix
    annotations: {}

# Autoscaling Configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Pod Security Context
podSecurityContext: {}
  # fsGroup: 2000

# Security Context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Node Selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod Annotations
podAnnotations: {}

# Pod Labels
podLabels: {}

# Network Policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Resource Quotas
resourceQuota:
  enabled: false
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi

# Monitoring Configuration
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: monitoring
    interval: 30s
    scrapeTimeout: 10s

# Logging Configuration
logging:
  enabled: false
  level: INFO
  format: json

# Backup Configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: "7d"

# Environment-specific overrides
environments:
  development:
    replicaCount: 1
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"
  
  staging:
    replicaCount: 2
    resources:
      requests:
        memory: "256Mi"
        cpu: "200m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  
  production:
    replicaCount: 3
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70

# Default values for SacuNXT Connector Framework
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: "myregistry.azurecr.io"
  imagePullPolicy: Always
  storageClass: "standard"
  namespace: "sacunxt"
  imagePullSecrets: "acr-secret"
  dockerConfigJson: ""
  logLevel: "WARN"  # Default log level for all services

# Secrets configuration
secrets:
  createACRSecret: true
  copyToNamespaces:
    - "sacunxt"
  acr:
    username: ""
    password: ""

# Database configuration
postgresql:
  enabled: true
  namespace: "database"
  serviceName: "postgres-service"
  deploymentName: "sacunxt-postgresql"
  auth:
    username: "sacunxt"
    password: "sacunxt_password"
    database: "api_service"
  primary:
    persistence:
      enabled: true
      storageClass: "standard"
      size: 5Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  service:
    ports:
      postgresql: 5432
# Redis configuration
redis:
  enabled: true
  namespace: "redis-cache"
  serviceName: "redis"
  deploymentName: "sacunxt-redis"
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      storageClass: "standard"
      size: 5Gi
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"
  service:
    ports:
      redis: 6379
# Kafka configuration
kafka:
  enabled: true
  namespace: "kafka-system"
  serviceName: "kafka-service"
  deploymentName: "sacunxt-kafka"
  replicaCount: 1
  zookeeper:
    enabled: true
    replicaCount: 1
    persistence:
      enabled: true
      storageClass: "standard"
      size: 5Gi
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "400m"
  persistence:
    enabled: true
    storageClass: "standard"
    size: 20Gi
  resources:
    requests:
      memory: "512Mi"
      cpu: "300m"
    limits:
      memory: "1Gi"
      cpu: "600m"
  service:
    ports:
      client: 9092
  config: |
    auto.create.topics.enable=true
    delete.topic.enable=true
    default.replication.factor=1
    min.insync.replicas=1
    num.partitions=3
    offsets.topic.replication.factor=1
    transaction.state.log.replication.factor=1
    transaction.state.log.min.isr=1
    log.retention.hours=168
    log.retention.bytes=1073741824
    log.segment.bytes=1073741824
    message.max.bytes=20971520
    replica.fetch.max.bytes=20971520
    compression.type=producer
    log.cleanup.policy=delete
# API Service Configuration
apiService:
  enabled: true
  replicaCount: 1
  image:
    repository: sacunxt/api-service
    tag: 2.2.2
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
  database:
    host: "postgres-service.database.svc.cluster.local"
    port: "5432"
    username: "sacunxt"
    name: "api_service"
    schema: "public"
    sslMode: "false"
    # Plaintext password
    password: "sacunxt_password"
    # Or use a secret
    # passwordSecret:
    #   name: "api-db-secret"  # Name of the Kubernetes secret
    #   key: "db-password"     # Key in the secret (defaults to "password")
    #   optional: true         # Whether the secret is optional
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  env:
    STATUS: "http://scheduler-service.sacunxt.svc.cluster.local:8002/scheduler/status"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    INTEGRATION_TOPIC: "integrations"
    ACTION_TOPIC: "actions"
    LOG_LEVEL: "{{ .Values.global.logLevel }}"
# Scheduler Service Configuration
schedulerService:
  enabled: true
  replicaCount: 1
  image:
    repository: sacunxt/scheduler-service
    tag: 2.2.1
  service:
    type: ClusterIP
    port: 8002
    targetPort: 8002
  database:
    host: "postgres-service.database.svc.cluster.local"
    port: "5432"
    username: "sacunxt"
    name: "api_service"
    schema: "public"
    sslMode: "false"
    # Plaintext password
    password: "sacunxt_password"
    # Or use a secret
    # passwordSecret:
    #   name: "api-db-secret"  # Name of the Kubernetes secret
    #   key: "db-password"     # Key in the secret (defaults to "password")
    #   optional: true         # Whether the secret is optional
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  env:
    REDIS_HOST: "redis.redis-cache.svc.cluster.local"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    TZ: "Asia/Kolkata"
    SCHEDULER_RETRIES: "4"
    INGESTION_TOPIC: "ingestions"
    JOBS_TOPIC: "jobs"
    RESULT_TOPIC: "results"
    RECOVER_JOB: "true"
    STOP_ON_FAILURE: "true"
    LOG_LEVEL: "{{ .Values.global.logLevel }}"
# Config Service Configuration
configService:
  enabled: true
  replicaCount: 1
  image:
    repository: sacunxt/config-service
    tag: 2.2.0
  service:
    type: ClusterIP
    port: 8001
    targetPort: 8001
  database:
    host: "postgres-service.database.svc.cluster.local"
    port: "5432"
    username: "sacunxt"
    name: "api_service"
    schema: "public"
    sslMode: "false"
    # Plaintext password
    password: "sacunxt_password"
    # Or use a secret
    # passwordSecret:
    #   name: "api-db-secret"  # Name of the Kubernetes secret
    #   key: "db-password"     # Key in the secret (defaults to "password")
    #   optional: true         # Whether the secret is optional
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  env:
    REDIS_HOST: "redis.redis-cache.svc.cluster.local"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    INTEGRATION_TOPIC: "integrations"
    INGESTION_TOPIC: "ingestions"
    LOG_LEVEL: "{{ .Values.global.logLevel }}"
# Collector Service Configuration
collectorService:
  enabled: true
  replicaCount: 1
  image:
    repository: sacunxt/collector-service
    tag: 2.2.1
  service:
    type: ClusterIP
    port: 8003
    targetPort: 8003
  database:
    host: "postgres-service.database.svc.cluster.local"
    port: "5432"
    username: "sacunxt"
    name: "api_service"
    schema: "public"
    sslMode: "false"
    # Plaintext password
    password: "sacunxt_password"
    # Or use a secret
    # passwordSecret:
    #   name: "api-db-secret"  # Name of the Kubernetes secret
    #   key: "db-password"     # Key in the secret (defaults to "password")
    #   optional: true         # Whether the secret is optional
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  env:
    REDIS_HOST: "redis.redis-cache.svc.cluster.local"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    MAX_PRODUCE_SIZE: "20971520"
    RAW_DATA_TOPIC: "source_data"
    JOBS_TOPIC: "jobs"
    STATUS_TOPIC: "service_status"
    LOG_LEVEL: "{{ .Values.global.logLevel }}"
# Normalizer Service Configuration
normalizerService:
  enabled: true
  replicaCount: 1
  image:
    repository: sacunxt/normalizer-service
    tag: 2.2.0
  service:
    type: ClusterIP
    port: 8004
    targetPort: 8004
  database:
    host: "postgres-service.database.svc.cluster.local"
    port: "5432"
    username: "sacunxt"
    name: "api_service"
    schema: "public"
    sslMode: "false"
    # Plaintext password
    password: "sacunxt_password"
    # Or use a secret
    # passwordSecret:
    #   name: "api-db-secret"  # Name of the Kubernetes secret
    #   key: "db-password"     # Key in the secret (defaults to "password")
    #   optional: true         # Whether the secret is optional
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  env:
    REDIS_HOST: "redis.redis-cache.svc.cluster.local"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    MAX_PRODUCE_SIZE: "20971520"
    RAW_DATA_TOPIC: "source_data"
    NORMALIZED_DATA_TOPIC: "normalized_data"
    STATUS_TOPIC: "service_status"
    LOG_LEVEL: "{{ .Values.global.logLevel }}"
# Publisher Service Configuration
publisherService:
  enabled: true
  replicaCount: 1
  image:
    repository: sacunxt/publisher-service
    tag: 2.2.1
  service:
    type: ClusterIP
    port: 8005
    targetPort: 8005
  database:
    host: "postgres-service.database.svc.cluster.local"
    port: "5432"
    username: "sacunxt"
    name: "api_service"
    schema: "public"
    sslMode: "false"
    # Plaintext password
    password: "sacunxt_password"
    # Or use a secret
    # passwordSecret:
    #   name: "api-db-secret"  # Name of the Kubernetes secret
    #   key: "db-password"     # Key in the secret (defaults to "password")
    #   optional: true         # Whether the secret is optional
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  env:
    REDIS_HOST: "redis.redis-cache.svc.cluster.local"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    NORMALIZED_DATA_TOPIC: "normalized_data"
    STATUS_TOPIC: "service_status"
    LOG_LEVEL: "{{ .Values.global.logLevel }}"
# Action Service Configuration
actionService:
  enabled: true
  replicaCount: 1
  image:
    repository: sacunxt/action-service
    tag: 2.1.0
  service:
    type: ClusterIP
    port: 8006
    targetPort: 8006
  database:
    host: "postgres-service.database.svc.cluster.local"
    port: "5432"
    username: "sacunxt"
    name: "api_service"
    schema: "public"
    sslMode: "false"
    # Plaintext password
    password: "sacunxt_password"
    # Or use a secret
    # passwordSecret:
    #   name: "api-db-secret"  # Name of the Kubernetes secret
    #   key: "db-password"     # Key in the secret (defaults to "password")
    #   optional: true         # Whether the secret is optional
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  env:
    REDIS_HOST: "redis.redis-cache.svc.cluster.local"
    REDIS_PORT: "6379"
    CONSUMER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    PRODUCER_CLUSTER: "kafka-service.kafka-system.svc.cluster.local:9092"
    ACTION_TOPIC: "actions"
    LOG_LEVEL: "{{ .Values.global.logLevel }}"
# ServiceMonitor for Prometheus monitoring
serviceMonitor:
  enabled: true
  namespace: monitoring
  interval: 30s
  scrapeTimeout: 10s
# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
# Network Policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000
# Pod Security Context
podSecurityContext:
  seccompProfile:
    type: RuntimeDefault
# Node Selector
nodeSelector: {}
# Tolerations
tolerations: []
# Affinity
affinity: {}
# Additional environment variables for all services
extraEnvVars: []
# Additional volumes for all services
extraVolumes: []
# Additional volume mounts for all services
extraVolumeMounts: []
